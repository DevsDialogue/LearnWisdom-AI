generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(10)
  accounts      Account[]
  sessions      Session[]
  
  userSubscription UserSubscription?
}

model UserSubscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Razorpay fields
  razorpayPaymentId    String?
  razorpayOrderId      String?
  razorpaySignature    String?
  
  plan                 String   @default("free") // free, pro, enterprise
  isActive             Boolean  @default(false)
  currentPeriodEnd     DateTime?
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Course {
  id          String @id @default(cuid())
  name        String
  image       String
  description String?
  units       Unit[]
}

model Unit {
  id        String    @id @default(cuid())
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  name      String
  chapters  Chapter[]

  @@index([courseId], name: "Unit_courseId_idx")
}

model Chapter {
  id                 String     @id @default(cuid())
  unitId             String
  unit               Unit       @relation(fields: [unitId], references: [id], onDelete: Cascade)
  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?    @db.VarChar(3000)
  questions          Question[]

  @@index([unitId], name: "Chapter_unitId_idx")
}

model Question {
  id        String  @id @default(cuid())
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  question  String  @db.VarChar(3000)
  answer    String  @db.VarChar(3000)
  options   String  @db.VarChar(3000)

  @@index([chapterId], name: "Question_chapterId_idx")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}